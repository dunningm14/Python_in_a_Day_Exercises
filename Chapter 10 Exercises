# Python 2.7.12
#
# Author: Madison Dunning
#
# Purpose:  The exercises from chapter 10


# importing the built-in math functions
import math

# Exercise 10-1.
# Write a function called nested_sum that takes a nested list of integers
# and add up the elements from all of the nested lists.
def nested_sum(nested_l):
    total = 0
    for l in nested_l:
        total += sum(l)
    return total

l1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
tot = nested_sum(l1)
print tot


# Exercise 10-2.
# Use capitalize_all to write a function named capitalize_nested that takes
# a nested list of strings and returns a new nested list with all strings
# capitalized.
def capitalize_all(t):
    res = []
    for s in t:
        res.append(s.capitalize())
    return res

# function to use capitalize_all to return a nested list of capitalized strings
def capitalize_nested(nList):
    capped_lists = []
    for l in nList:
        capped_lists.append(capitalize_all(l))
    return capped_lists

fout = open('ex10-2.txt', 'w')
capped = []
nestStr = [['aeiou', 'are', 'vowels'], ['bcdfg', 'are', 'consonants'], ['and', 
'This', 'is MixED']]
capped = capitalize_nested(nestStr)
fout.write(str(capped))
fout.close()


# Exercise 10-3.
# Write a function that takes a list of numbers and returns the cumulative
# sum; that is, a new list where the ith element is the sum of the first i+1
# elements from the original list. For example, the cumulative sum of [1, 2, 3]
# is [1, 3, 6].
def cumult_sum(nums):
    total = 0
    cumultsum = []
    for num in nums:
       total += num
       cumultsum.append(total)
    return cumultsum


# Exercise 10-4.
# Write a function called middle that takes a list and returns a new list
# that contains all but the first and last elements. So middle([1,2,3,4])
# should return [2,3].
def middle(t):
    mid = t[:]
    del mid[0]
    del mid[len(mid)-1]
    return mid


# Exercise 10-5.
# Write a function called chop that takes a list, modifies it by removing
# the first and last elements, and returns None.
def chop(t):
    del t[0]
    del t[len(t)-1]


# Exercise 10-6.
# Write a function called is_sorted that takes a list as a parameter and
# returns True if the list is sorted in ascending order and False otherwise.
# You can assume (as a precondition) that the elements of the list can be
# compared with the relational operators <, >, etc. For example, is_sorted
# ([1,2,2]) should return True and is_sorted(['b','a']) should return False.
def is_sorted(t):
    for i in range(len(t)-1):
        
        if t[i+1] < t[i]:
          return False  

    return True


# Exercise 10-7.
# Two words are anagrams if you can rearrange the letters from one to spell
# the other. Write a function called is_anagram that takes two strings and
# returns True if they are anagrams.
def is_anagram(s1,s2):
    t1 = list(s1)
    t2 = list(s2)
    t1.sort()
    t2.sort()
    return ''.join(t1) == ''.join(t2)


# Exercise 10-8.
# The (so-called) Birthday Paradox:
# 1. Write a function called has_duplicates that takes a list and returns
# True if there is any element that appears more than once. It should not
# modify the original list.
# 2. If there are 23 students in your class, what are the chances that two
# of you have the same birthday? You can estimate this probability by
# generating random samples of 23 birthdays and checking for matches.
# Hint: you can generate random birthdays with the randint function in the
# random module.
import random

def has_duplicates(t):
    sort = t[:]
    sort.sort()
    for i in range(len(sort)-1):
        if sort[i] == sort[i+1]:
            return True

def birthday_duplicates():
    birthdays = []
    count = 0
    i = 0
    while i < 1000:
        for items in range(23):
            birthdays.append(random.randint(1,365))

        if has_duplicates(birthdays):
                count += 1
        i +=1
    return count/i * 100


# Exercise 10-9.
# Write a function called remove_duplicates that takes a list and returns
# a new list with only the unique elements from the original. Hint: they
# don’t have to be in the same order.
def remove_duplicates(t):
    s = t[:]
    s.sort()
    for i in range(len(s)-1):
        if s[i] == s[i+1]:
            del s[i]
    return s



# Exercise 10-10.
# Write a function that reads the file words.txt and builds a list with one
# element per word. Write two versions of this function, one using the append
# method and the other using the idiom t = t + [x]. 
import time

f = open('words.txt')

def build_list1():
    word_list = []
    for line in f:
        word = line.strip()
        word_list.append(word)
    f.seek(0)
    return word_list

def build_list2():
    word_list = []
    for line in f:
        word = line.strip()
        word_list += [word]


# Exercise 10-11.
# To check whether a word is in the word list, you could use the in operator,
# but it would be slow because it searches through the words in order.
# Because the words are in alphabetical order, we can speed things up with a
# bisection search (also known as binary search), which is similar to what you
# do when you look a word up in the dictionary. You start in the middle and
# check to see whether the word you are looking for comes before the word in
# the middle of the list. If so, then you search the first half of the list
# the same way. Otherwise you search the second half. Either way, you cut the
# remaining search space in half. If the word list has 113,809 words, it will
# take about 17 steps to find the word or conclude that it’s not there.
# Write a function called bisect that takes a sorted list and a target value
# and returns the index of the value in the list, if it’s there, or None if
# it’s not.
import math

def bisect(words, word):
    top = 0
    bottom = len(words)
    section = 0
    mid = 0
    repeat = 0
    max_repeat = len(words)
    while True:
        mid = math.floor((top+bottom)/2)

        if word < words[mid]:
            bottom = mid
            
        elif word > words[mid]:
            top = mid
            
        else:
            print(mid)
            break
        
        repeat += 1
        if repeat > max_repeat:
            print("Not found")
            break

from bisect import bisect_left


def in_bisect(word_list, word):
    i = bisect_left(word_list, word)
    if i != len(word_list) and word_list[i] == word:
        return True
    else:
        return False


# Exercise 10-12.
# Two words are a “reverse pair” if each is the reverse of the other. Write a
# program that finds all the reverse pairs in the word list. 
def search(words, word):
    top = 0
    bottom = len(words)
    section = 0
    mid = 0
    repeat = 0
    max_repeat = 20
    while True:
        mid = math.floor((top+bottom)/2)

        if word < words[mid]:
            bottom = mid
            
        elif word > words[mid]:
            top = mid
            
        else:
            return True
            break
        
        repeat += 1
        if repeat > max_repeat:
            return False
            break
        
def reverse_pair():
    words = build_list1()
    f.seek(0)
    for line in f:
        word = line.strip()
        revword = word[::-1]
        if revword != word:
            if search(words, revword):
                print(word, revword)


# Exercise 10-13.
# Two words “interlock” if taking alternating letters from each forms a new
# word. For example, “shoe” and “cold” interlock to form “schooled.” 
def interlock(words):
    for line in f:
        interlocked_word = line.strip()
        word1 = interlocked_word[::2]
        word2 = interlocked_word[1::2]
        if search(words, word1) and search(words, word2):
            print(interlocked_word, word1, word2)

def interlock_gen(words, word, n):

    interlocked_word = word.strip()
        
    for i in range(n):

        word_check = interlocked_word[i::n]

        if not search(words,word_check):
            return False
            
    return True
