# Python 2.7.12
#
# Author: Madison Dunning
#
# Purpose:  The exercises from chapter 7

import math

# Exercise 7-1
# Rewrite program from section 5.8 using iteration instead of recursion.
def print_n(s,n):
    while n > 0:
        print s
        n = n -1
    return

if __name__ == '__main__':
    print_n("hello", 5)
    

# Exercise 7-2
# Encapsulate this loop in a function called square_root
# that takes a as a parameter, chooses a reasonable value of x, and
# returns an estimate of the square root of a.
def square_root(a):
    x = a / 2.0

    while True:
        y = (x + a / x) / 2

        if x == y:
            return x

        x = y


# Exercise 7-3
# Testing the previous funtion

if __name__ == '__main__':

    for n in range(1, 10):
        print n, "\t",
        print square_root(n),"\t",
        print math.sqrt(n),"\t",

        print abs(square_root(n) - math.sqrt(n))



# Exercise 7-4
# Write a function called eval_loop that iteratively prompts the user,
# takes the resulting input and evaluates it using eval, and prints the
# result. It should continue until the user enters 'done', and then return
# the value of the last expression it evaluated.
def eval_loop():
    while True:
        n = raw_input('Input?\n:: ')
        if n == 'done':
            break
        else:
            result = eval(n)
            print result
    print result

eval_loop()


# Exercise 7-5
# Write a function called estimate_pi that uses this formula to
# compute and return an estimate of Ï€. It should use a while loop to
# compute terms of the summation until the last term is smaller than
# 1e-15 (which is Python notation for 10-15). You can check the result
# by comparing it to math.pi.
def estimate_pi():
    k = 0.0
    last_term = 1.0
    sigma = 0
    while last_term > 1e-15:
        last_term = ((math.factorial(4.0 * k)) * (1103.0 + 26390.0 * (k))) \
        / ((math.factorial(k) ** 4.0) * (396.0 ** (4.0 * k)))
        k += 1.0
        sigma += last_term
    result = ((2 * math.sqrt(2)) / 9801) * sigma
    return 1 / result

print estimate_pi()
print math.pi
